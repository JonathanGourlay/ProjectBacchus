//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace Net6SpaTemplate.BLL.Client
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// &lt;b&gt;Click here to view the documentation&lt;/b&gt;
        /// </summary>
        /// <param name="type">Type of recipes to search for.</param>
        /// <param name="app_id">The application ID</param>
        /// <param name="app_key">The application key</param>
        /// <param name="beta">Allow beta features in the request and response</param>
        /// <param name="q">Query text, for example "chicken". &lt;b&gt;Not Required&lt;/b&gt; if any other parameter (other than application credentials) is specified. &lt;b&gt;Required&lt;/b&gt; if no other parameter is specified.</param>
        /// <param name="ingr">Filter by number of ingredients (MIN+, MIN-MAX, MAX), where MIN and MAX are integer numbers. Example: ingr=5-8</param>
        /// <param name="diet">Diet label. You can select multiple labels by holding shift and left-clicking all the labels needed.</param>
        /// <param name="health">Health label. You can select multiple labels by holding shift and left-clicking all the labels needed.</param>
        /// <param name="cuisineType">The type of cuisine of the recipe</param>
        /// <param name="mealType">The type of meal a recipe belongs to</param>
        /// <param name="dishType">The dish type a recipe belongs to</param>
        /// <param name="calories">The format is calories=RANGE where RANGE is in one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating point numbers. The + symbol needs to be properly encoded. Examples: “calories=100-300” will return all recipes with which have between 100 and 300 kcal per serving.</param>
        /// <param name="time">Time range for the total cooking and prep time for a recipe . The format is time=RANGE where RANGE is one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative integer numbers. The + symbol needs to be properly encoded. Examples: “time=1%2B” will return all recipes with available total time greater then 1 minute</param>
        /// <param name="imageSize">Show only recipes, which have images with selected sizes</param>
        /// <param name="glycemicIndex">Filter by glycemic index. The format is FLOAT-RANGE</param>
        /// <param name="excluded">Excluding recipes with certain ingredients. The format is excluded=FOOD where FOOD is replaced by the name of the specific food you don’t want to be present in the recipe results. More than one food can be excluded at the same time. Example: excluded=vinegar&amp;excluded=pretzel will exclude any recipes which contain vinegar or pretzels in their ingredient list</param>
        /// <param name="random">Select whether you want this query to respond with a random selection of 20 recipes based on the criteria filled. If there were only 20 or less possible results, this will return those results in random order.</param>
        /// <param name="nutrientsCA">Calcium, Ca. Unit: mg. Input the range which is one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating point numbers. &lt;br&gt; &lt;br&gt; For example: nutrients[CA]=50+ means minimum 50mg calcium, where ‘50+’ has to be properly encoded as ‘50%2B’ nutrients[FAT]=30 means maximum 30g fat and nutrients[FE]=5-10 means iron between 5mg and 10mg inclusive</param>
        /// <param name="nutrientsCHOCDF">Carbohydrate, by difference. Unit: g. Input the range which is one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating point numbers. &lt;br&gt; &lt;br&gt; See calcium for an example for how to fill in the range.</param>
        /// <param name="nutrientsCHOCDF_net">Carbohydrates (net). Unit: g. Input the range which is one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating point numbers. &lt;br&gt; &lt;br&gt; See calcium for an example for how to fill in the range.</param>
        /// <param name="nutrientsCHOLE">Cholesterol. Unit: mg. Input the range which is one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating point numbers. &lt;br&gt; &lt;br&gt;See calcium for an example for how to fill in the range.</param>
        /// <param name="nutrientsENERC_KCAL">Energy. Unit: kcal. Input the range which is one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating point numbers. &lt;br&gt; &lt;br&gt; See calcium for an example for how to fill in the range.</param>
        /// <param name="nutrientsFAMS">Fatty acids, total monounsaturated. Unit: g. Input the range which is one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating point numbers. &lt;br&gt; &lt;br&gt; See calcium for an example for how to fill in the range.</param>
        /// <param name="nutrientsFAPU">Fatty acids, total polyunsaturated. Unit: g. Input the range which is one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating point numbers. &lt;br&gt; &lt;br&gt; See calcium for an example for how to fill in the range.</param>
        /// <param name="nutrientsFASAT">Fatty acids, total saturated. Unit: g. Input the range which is one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating point numbers. &lt;br&gt; &lt;br&gt; See calcium for an example for how to fill in the range.</param>
        /// <param name="nutrientsFAT">Total lipid (fat). Unit: g. Input the range which is one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating point numbers. &lt;br&gt; &lt;br&gt; See calcium for an example for how to fill in the range.</param>
        /// <param name="nutrientsFATRN">Fatty acids, total trans. Unit: g. Input the range which is one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating point numbers. &lt;br&gt; &lt;br&gt; See calcium for an example for how to fill in the range.</param>
        /// <param name="nutrientsFE">Iron, Fe. Unit: mg. Input the range which is one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating point numbers. &lt;br&gt; &lt;br&gt; See calcium for an example for how to fill in the range.</param>
        /// <param name="nutrientsFIBTG">Fiber, total dietary. Unit: g. Input the range which is one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating point numbers. &lt;br&gt; &lt;br&gt; See calcium for an example for how to fill in the range.</param>
        /// <param name="nutrientsFOLAC">Folic acid. Unit: µg. Input the range which is one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating point numbers. &lt;br&gt; &lt;br&gt; See calcium for an example for how to fill in the range.</param>
        /// <param name="nutrientsFOLDFE">Folate, DFE. Unit: µg. Input the range which is one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating point numbers. &lt;br&gt; &lt;br&gt; See calcium for an example for how to fill in the range.</param>
        /// <param name="nutrientsFOLFD">Folate (food). Unit: µg. Input the range which is one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating point numbers. &lt;br&gt; &lt;br&gt; See calcium for an example for how to fill in the range.</param>
        /// <param name="nutrientsK">Potassium, K. Unit: mg. Input the range which is one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating point numbers. &lt;br&gt; &lt;br&gt; See calcium for an example for how to fill in the range.</param>
        /// <param name="nutrientsMG">Magnesium. Unit: mg. Input the range which is one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating point numbers. &lt;br&gt; &lt;br&gt; See calcium for an example for how to fill in the range.</param>
        /// <param name="nutrientsNA">Sodium, Na. Unit: mg. Input the range which is one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating point numbers. &lt;br&gt; &lt;br&gt; See calcium for an example for how to fill in the range.</param>
        /// <param name="nutrientsNIA">Niacin. Unit: mg. Input the range which is one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating point numbers. &lt;br&gt; &lt;br&gt; See calcium for an example for how to fill in the range.</param>
        /// <param name="nutrientsP">Phosphorus, P. Unit: mg. Input the range which is one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating point numbers. &lt;br&gt; &lt;br&gt; See calcium for an example for how to fill in the range.</param>
        /// <param name="nutrientsPROCNT">Protein. Unit: g. Input the range which is one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating point numbers. &lt;br&gt; &lt;br&gt; See calcium for an example for how to fill in the range.</param>
        /// <param name="nutrientsRIBF">Riboflavin. Unit: mg. Input the range which is one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating point numbers. &lt;br&gt; &lt;br&gt; See calcium for an example for how to fill in the range.</param>
        /// <param name="nutrientsSUGAR">Sugars, total. Unit: g. Input the range which is one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating point numbers. &lt;br&gt; &lt;br&gt; See calcium for an example for how to fill in the range.</param>
        /// <param name="nutrientsSUGAR_added">Sugars, added. Unit: g. Input the range which is one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating point numbers. &lt;br&gt; &lt;br&gt; See calcium for an example for how to fill in the range.</param>
        /// <param name="nutrientsSugar_alcohol">Sugar alcohols. Unit: g. Input the range which is one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating point numbers. &lt;br&gt; &lt;br&gt; See calcium for an example for how to fill in the range.</param>
        /// <param name="nutrientsTHIA">Thiamin. Unit: mg. Input the range which is one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating point numbers. &lt;br&gt; &lt;br&gt; See calcium for an example for how to fill in the range.</param>
        /// <param name="nutrientsTOCPHA">Vitamin E (alpha-tocopherol). Unit: mg. Input the range which is one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating point numbers. &lt;br&gt; &lt;br&gt; See calcium for an example for how to fill in the range.</param>
        /// <param name="nutrientsVITA_RAE">Vitamin A, RAE. Unit: µg. Input the range which is one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating point numbers. &lt;br&gt; &lt;br&gt; See calcium for an example for how to fill in the range.</param>
        /// <param name="nutrientsVITB12">Vitamin B12. Unit: µg. Input the range which is one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating point numbers. &lt;br&gt; &lt;br&gt; See calcium for an example for how to fill in the range.</param>
        /// <param name="nutrientsVITB6A">Vitamin B6. Unit: mg. Input the range which is one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating point numbers. &lt;br&gt; &lt;br&gt; See calcium for an example for how to fill in the range.</param>
        /// <param name="nutrientsVITC">Vitamin C, total ascorbic acid. Unit: mg. Input the range which is one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating point numbers. &lt;br&gt; &lt;br&gt; See calcium for an example for how to fill in the range.</param>
        /// <param name="nutrientsVITD">Vitamin D (D2 + D3). Unit: µg. Input the range which is one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating point numbers. &lt;br&gt; &lt;br&gt; See calcium for an example for how to fill in the range.</param>
        /// <param name="nutrientsVITK1">Vitamin K (phylloquinone). Unit: µg. Input the range which is one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating point numbers. &lt;br&gt; &lt;br&gt; See calcium for an example for how to fill in the range.</param>
        /// <param name="nutrientsWATER">Water. Unit: g. Input the range which is one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating point numbers. &lt;br&gt; &lt;br&gt; See calcium for an example for how to fill in the range.</param>
        /// <param name="nutrientsZN">Zinc, Zn. Unit: mg. Input the range which is one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating point numbers. &lt;br&gt; &lt;br&gt; See calcium for an example for how to fill in the range.</param>
        /// <param name="field">Recipe fields to be included in the response.</param>
        /// <param name="co2EmissionsClass">(BETA) Filter recipes by their CO2 footprint.</param>
        /// <param name="tag">Only show recipes with the specified tags.</param>
        /// <returns>A list of recipes</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response> V2Async(Type type, string app_id, string app_key, bool? beta = null, string q = null, string ingr = null, System.Collections.Generic.IEnumerable<Anonymous> diet = null, System.Collections.Generic.IEnumerable<Anonymous2> health = null, System.Collections.Generic.IEnumerable<Anonymous3> cuisineType = null, System.Collections.Generic.IEnumerable<Anonymous4> mealType = null, System.Collections.Generic.IEnumerable<Anonymous5> dishType = null, string calories = null, string time = null, System.Collections.Generic.IEnumerable<Anonymous6> imageSize = null, string glycemicIndex = null, System.Collections.Generic.IEnumerable<string> excluded = null, bool? random = null, string nutrientsCA = null, string nutrientsCHOCDF = null, string nutrientsCHOCDF_net = null, string nutrientsCHOLE = null, string nutrientsENERC_KCAL = null, string nutrientsFAMS = null, string nutrientsFAPU = null, string nutrientsFASAT = null, string nutrientsFAT = null, string nutrientsFATRN = null, string nutrientsFE = null, string nutrientsFIBTG = null, string nutrientsFOLAC = null, string nutrientsFOLDFE = null, string nutrientsFOLFD = null, string nutrientsK = null, string nutrientsMG = null, string nutrientsNA = null, string nutrientsNIA = null, string nutrientsP = null, string nutrientsPROCNT = null, string nutrientsRIBF = null, string nutrientsSUGAR = null, string nutrientsSUGAR_added = null, string nutrientsSugar_alcohol = null, string nutrientsTHIA = null, string nutrientsTOCPHA = null, string nutrientsVITA_RAE = null, string nutrientsVITB12 = null, string nutrientsVITB6A = null, string nutrientsVITC = null, string nutrientsVITD = null, string nutrientsVITK1 = null, string nutrientsWATER = null, string nutrientsZN = null, System.Collections.Generic.IEnumerable<Anonymous7> field = null, Co2EmissionsClass? co2EmissionsClass = null, System.Collections.Generic.IEnumerable<string> tag = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// &lt;b&gt;Click here to view the documentation&lt;/b&gt;
        /// </summary>
        /// <param name="id">The recipe ID</param>
        /// <param name="type">Type of recipes to search for.</param>
        /// <param name="app_id">The application ID</param>
        /// <param name="app_key">The application key</param>
        /// <param name="beta">Allow beta features in response.</param>
        /// <param name="field">Recipe fields to be included in the response.</param>
        /// <returns>Recipe info</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Hit> V22Async(string id, Type2 type, string app_id, string app_key, bool? beta = null, System.Collections.Generic.IEnumerable<Anonymous8> field = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Client : BaseApiClient, IClient
    {
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

        public Client(FoodApiConfig configuration, System.Net.Http.HttpClient httpClient) : base(configuration)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings);
        }

        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// &lt;b&gt;Click here to view the documentation&lt;/b&gt;
        /// </summary>
        /// <param name="type">Type of recipes to search for.</param>
        /// <param name="app_id">The application ID</param>
        /// <param name="app_key">The application key</param>
        /// <param name="beta">Allow beta features in the request and response</param>
        /// <param name="q">Query text, for example "chicken". &lt;b&gt;Not Required&lt;/b&gt; if any other parameter (other than application credentials) is specified. &lt;b&gt;Required&lt;/b&gt; if no other parameter is specified.</param>
        /// <param name="ingr">Filter by number of ingredients (MIN+, MIN-MAX, MAX), where MIN and MAX are integer numbers. Example: ingr=5-8</param>
        /// <param name="diet">Diet label. You can select multiple labels by holding shift and left-clicking all the labels needed.</param>
        /// <param name="health">Health label. You can select multiple labels by holding shift and left-clicking all the labels needed.</param>
        /// <param name="cuisineType">The type of cuisine of the recipe</param>
        /// <param name="mealType">The type of meal a recipe belongs to</param>
        /// <param name="dishType">The dish type a recipe belongs to</param>
        /// <param name="calories">The format is calories=RANGE where RANGE is in one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating point numbers. The + symbol needs to be properly encoded. Examples: “calories=100-300” will return all recipes with which have between 100 and 300 kcal per serving.</param>
        /// <param name="time">Time range for the total cooking and prep time for a recipe . The format is time=RANGE where RANGE is one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative integer numbers. The + symbol needs to be properly encoded. Examples: “time=1%2B” will return all recipes with available total time greater then 1 minute</param>
        /// <param name="imageSize">Show only recipes, which have images with selected sizes</param>
        /// <param name="glycemicIndex">Filter by glycemic index. The format is FLOAT-RANGE</param>
        /// <param name="excluded">Excluding recipes with certain ingredients. The format is excluded=FOOD where FOOD is replaced by the name of the specific food you don’t want to be present in the recipe results. More than one food can be excluded at the same time. Example: excluded=vinegar&amp;excluded=pretzel will exclude any recipes which contain vinegar or pretzels in their ingredient list</param>
        /// <param name="random">Select whether you want this query to respond with a random selection of 20 recipes based on the criteria filled. If there were only 20 or less possible results, this will return those results in random order.</param>
        /// <param name="nutrientsCA">Calcium, Ca. Unit: mg. Input the range which is one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating point numbers. &lt;br&gt; &lt;br&gt; For example: nutrients[CA]=50+ means minimum 50mg calcium, where ‘50+’ has to be properly encoded as ‘50%2B’ nutrients[FAT]=30 means maximum 30g fat and nutrients[FE]=5-10 means iron between 5mg and 10mg inclusive</param>
        /// <param name="nutrientsCHOCDF">Carbohydrate, by difference. Unit: g. Input the range which is one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating point numbers. &lt;br&gt; &lt;br&gt; See calcium for an example for how to fill in the range.</param>
        /// <param name="nutrientsCHOCDF_net">Carbohydrates (net). Unit: g. Input the range which is one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating point numbers. &lt;br&gt; &lt;br&gt; See calcium for an example for how to fill in the range.</param>
        /// <param name="nutrientsCHOLE">Cholesterol. Unit: mg. Input the range which is one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating point numbers. &lt;br&gt; &lt;br&gt;See calcium for an example for how to fill in the range.</param>
        /// <param name="nutrientsENERC_KCAL">Energy. Unit: kcal. Input the range which is one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating point numbers. &lt;br&gt; &lt;br&gt; See calcium for an example for how to fill in the range.</param>
        /// <param name="nutrientsFAMS">Fatty acids, total monounsaturated. Unit: g. Input the range which is one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating point numbers. &lt;br&gt; &lt;br&gt; See calcium for an example for how to fill in the range.</param>
        /// <param name="nutrientsFAPU">Fatty acids, total polyunsaturated. Unit: g. Input the range which is one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating point numbers. &lt;br&gt; &lt;br&gt; See calcium for an example for how to fill in the range.</param>
        /// <param name="nutrientsFASAT">Fatty acids, total saturated. Unit: g. Input the range which is one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating point numbers. &lt;br&gt; &lt;br&gt; See calcium for an example for how to fill in the range.</param>
        /// <param name="nutrientsFAT">Total lipid (fat). Unit: g. Input the range which is one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating point numbers. &lt;br&gt; &lt;br&gt; See calcium for an example for how to fill in the range.</param>
        /// <param name="nutrientsFATRN">Fatty acids, total trans. Unit: g. Input the range which is one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating point numbers. &lt;br&gt; &lt;br&gt; See calcium for an example for how to fill in the range.</param>
        /// <param name="nutrientsFE">Iron, Fe. Unit: mg. Input the range which is one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating point numbers. &lt;br&gt; &lt;br&gt; See calcium for an example for how to fill in the range.</param>
        /// <param name="nutrientsFIBTG">Fiber, total dietary. Unit: g. Input the range which is one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating point numbers. &lt;br&gt; &lt;br&gt; See calcium for an example for how to fill in the range.</param>
        /// <param name="nutrientsFOLAC">Folic acid. Unit: µg. Input the range which is one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating point numbers. &lt;br&gt; &lt;br&gt; See calcium for an example for how to fill in the range.</param>
        /// <param name="nutrientsFOLDFE">Folate, DFE. Unit: µg. Input the range which is one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating point numbers. &lt;br&gt; &lt;br&gt; See calcium for an example for how to fill in the range.</param>
        /// <param name="nutrientsFOLFD">Folate (food). Unit: µg. Input the range which is one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating point numbers. &lt;br&gt; &lt;br&gt; See calcium for an example for how to fill in the range.</param>
        /// <param name="nutrientsK">Potassium, K. Unit: mg. Input the range which is one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating point numbers. &lt;br&gt; &lt;br&gt; See calcium for an example for how to fill in the range.</param>
        /// <param name="nutrientsMG">Magnesium. Unit: mg. Input the range which is one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating point numbers. &lt;br&gt; &lt;br&gt; See calcium for an example for how to fill in the range.</param>
        /// <param name="nutrientsNA">Sodium, Na. Unit: mg. Input the range which is one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating point numbers. &lt;br&gt; &lt;br&gt; See calcium for an example for how to fill in the range.</param>
        /// <param name="nutrientsNIA">Niacin. Unit: mg. Input the range which is one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating point numbers. &lt;br&gt; &lt;br&gt; See calcium for an example for how to fill in the range.</param>
        /// <param name="nutrientsP">Phosphorus, P. Unit: mg. Input the range which is one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating point numbers. &lt;br&gt; &lt;br&gt; See calcium for an example for how to fill in the range.</param>
        /// <param name="nutrientsPROCNT">Protein. Unit: g. Input the range which is one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating point numbers. &lt;br&gt; &lt;br&gt; See calcium for an example for how to fill in the range.</param>
        /// <param name="nutrientsRIBF">Riboflavin. Unit: mg. Input the range which is one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating point numbers. &lt;br&gt; &lt;br&gt; See calcium for an example for how to fill in the range.</param>
        /// <param name="nutrientsSUGAR">Sugars, total. Unit: g. Input the range which is one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating point numbers. &lt;br&gt; &lt;br&gt; See calcium for an example for how to fill in the range.</param>
        /// <param name="nutrientsSUGAR_added">Sugars, added. Unit: g. Input the range which is one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating point numbers. &lt;br&gt; &lt;br&gt; See calcium for an example for how to fill in the range.</param>
        /// <param name="nutrientsSugar_alcohol">Sugar alcohols. Unit: g. Input the range which is one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating point numbers. &lt;br&gt; &lt;br&gt; See calcium for an example for how to fill in the range.</param>
        /// <param name="nutrientsTHIA">Thiamin. Unit: mg. Input the range which is one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating point numbers. &lt;br&gt; &lt;br&gt; See calcium for an example for how to fill in the range.</param>
        /// <param name="nutrientsTOCPHA">Vitamin E (alpha-tocopherol). Unit: mg. Input the range which is one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating point numbers. &lt;br&gt; &lt;br&gt; See calcium for an example for how to fill in the range.</param>
        /// <param name="nutrientsVITA_RAE">Vitamin A, RAE. Unit: µg. Input the range which is one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating point numbers. &lt;br&gt; &lt;br&gt; See calcium for an example for how to fill in the range.</param>
        /// <param name="nutrientsVITB12">Vitamin B12. Unit: µg. Input the range which is one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating point numbers. &lt;br&gt; &lt;br&gt; See calcium for an example for how to fill in the range.</param>
        /// <param name="nutrientsVITB6A">Vitamin B6. Unit: mg. Input the range which is one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating point numbers. &lt;br&gt; &lt;br&gt; See calcium for an example for how to fill in the range.</param>
        /// <param name="nutrientsVITC">Vitamin C, total ascorbic acid. Unit: mg. Input the range which is one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating point numbers. &lt;br&gt; &lt;br&gt; See calcium for an example for how to fill in the range.</param>
        /// <param name="nutrientsVITD">Vitamin D (D2 + D3). Unit: µg. Input the range which is one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating point numbers. &lt;br&gt; &lt;br&gt; See calcium for an example for how to fill in the range.</param>
        /// <param name="nutrientsVITK1">Vitamin K (phylloquinone). Unit: µg. Input the range which is one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating point numbers. &lt;br&gt; &lt;br&gt; See calcium for an example for how to fill in the range.</param>
        /// <param name="nutrientsWATER">Water. Unit: g. Input the range which is one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating point numbers. &lt;br&gt; &lt;br&gt; See calcium for an example for how to fill in the range.</param>
        /// <param name="nutrientsZN">Zinc, Zn. Unit: mg. Input the range which is one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating point numbers. &lt;br&gt; &lt;br&gt; See calcium for an example for how to fill in the range.</param>
        /// <param name="field">Recipe fields to be included in the response.</param>
        /// <param name="co2EmissionsClass">(BETA) Filter recipes by their CO2 footprint.</param>
        /// <param name="tag">Only show recipes with the specified tags.</param>
        /// <returns>A list of recipes</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response> V2Async(Type type, string app_id, string app_key, bool? beta = null, string q = null, string ingr = null, System.Collections.Generic.IEnumerable<Anonymous> diet = null, System.Collections.Generic.IEnumerable<Anonymous2> health = null, System.Collections.Generic.IEnumerable<Anonymous3> cuisineType = null, System.Collections.Generic.IEnumerable<Anonymous4> mealType = null, System.Collections.Generic.IEnumerable<Anonymous5> dishType = null, string calories = null, string time = null, System.Collections.Generic.IEnumerable<Anonymous6> imageSize = null, string glycemicIndex = null, System.Collections.Generic.IEnumerable<string> excluded = null, bool? random = null, string nutrientsCA = null, string nutrientsCHOCDF = null, string nutrientsCHOCDF_net = null, string nutrientsCHOLE = null, string nutrientsENERC_KCAL = null, string nutrientsFAMS = null, string nutrientsFAPU = null, string nutrientsFASAT = null, string nutrientsFAT = null, string nutrientsFATRN = null, string nutrientsFE = null, string nutrientsFIBTG = null, string nutrientsFOLAC = null, string nutrientsFOLDFE = null, string nutrientsFOLFD = null, string nutrientsK = null, string nutrientsMG = null, string nutrientsNA = null, string nutrientsNIA = null, string nutrientsP = null, string nutrientsPROCNT = null, string nutrientsRIBF = null, string nutrientsSUGAR = null, string nutrientsSUGAR_added = null, string nutrientsSugar_alcohol = null, string nutrientsTHIA = null, string nutrientsTOCPHA = null, string nutrientsVITA_RAE = null, string nutrientsVITB12 = null, string nutrientsVITB6A = null, string nutrientsVITC = null, string nutrientsVITD = null, string nutrientsVITK1 = null, string nutrientsWATER = null, string nutrientsZN = null, System.Collections.Generic.IEnumerable<Anonymous7> field = null, Co2EmissionsClass? co2EmissionsClass = null, System.Collections.Generic.IEnumerable<string> tag = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (type == null)
                throw new System.ArgumentNullException("type");

            if (app_id == null)
                throw new System.ArgumentNullException("app_id");

            if (app_key == null)
                throw new System.ArgumentNullException("app_key");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/recipes/v2?");
            urlBuilder_.Append(System.Uri.EscapeDataString("type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("app_id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(app_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("app_key") + "=").Append(System.Uri.EscapeDataString(ConvertToString(app_key, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (beta != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("beta") + "=").Append(System.Uri.EscapeDataString(ConvertToString(beta, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (q != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("q") + "=").Append(System.Uri.EscapeDataString(ConvertToString(q, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ingr != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ingr") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ingr, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (diet != null)
            {
                foreach (var item_ in diet) { urlBuilder_.Append(System.Uri.EscapeDataString("diet") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (health != null)
            {
                foreach (var item_ in health) { urlBuilder_.Append(System.Uri.EscapeDataString("health") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (cuisineType != null)
            {
                foreach (var item_ in cuisineType) { urlBuilder_.Append(System.Uri.EscapeDataString("cuisineType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (mealType != null)
            {
                foreach (var item_ in mealType) { urlBuilder_.Append(System.Uri.EscapeDataString("mealType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (dishType != null)
            {
                foreach (var item_ in dishType) { urlBuilder_.Append(System.Uri.EscapeDataString("dishType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (calories != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("calories") + "=").Append(System.Uri.EscapeDataString(ConvertToString(calories, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (time != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("time") + "=").Append(System.Uri.EscapeDataString(ConvertToString(time, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (imageSize != null)
            {
                foreach (var item_ in imageSize) { urlBuilder_.Append(System.Uri.EscapeDataString("imageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (glycemicIndex != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("glycemicIndex") + "=").Append(System.Uri.EscapeDataString(ConvertToString(glycemicIndex, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (excluded != null)
            {
                foreach (var item_ in excluded) { urlBuilder_.Append(System.Uri.EscapeDataString("excluded") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (random != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("random") + "=").Append(System.Uri.EscapeDataString(ConvertToString(random, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (nutrientsCA != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("nutrients[CA]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(nutrientsCA, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (nutrientsCHOCDF != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("nutrients[CHOCDF]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(nutrientsCHOCDF, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (nutrientsCHOCDF_net != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("nutrients[CHOCDF.net]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(nutrientsCHOCDF_net, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (nutrientsCHOLE != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("nutrients[CHOLE]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(nutrientsCHOLE, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (nutrientsENERC_KCAL != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("nutrients[ENERC_KCAL]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(nutrientsENERC_KCAL, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (nutrientsFAMS != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("nutrients[FAMS]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(nutrientsFAMS, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (nutrientsFAPU != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("nutrients[FAPU]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(nutrientsFAPU, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (nutrientsFASAT != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("nutrients[FASAT]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(nutrientsFASAT, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (nutrientsFAT != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("nutrients[FAT]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(nutrientsFAT, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (nutrientsFATRN != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("nutrients[FATRN]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(nutrientsFATRN, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (nutrientsFE != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("nutrients[FE]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(nutrientsFE, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (nutrientsFIBTG != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("nutrients[FIBTG]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(nutrientsFIBTG, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (nutrientsFOLAC != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("nutrients[FOLAC]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(nutrientsFOLAC, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (nutrientsFOLDFE != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("nutrients[FOLDFE]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(nutrientsFOLDFE, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (nutrientsFOLFD != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("nutrients[FOLFD]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(nutrientsFOLFD, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (nutrientsK != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("nutrients[K]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(nutrientsK, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (nutrientsMG != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("nutrients[MG]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(nutrientsMG, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (nutrientsNA != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("nutrients[NA]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(nutrientsNA, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (nutrientsNIA != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("nutrients[NIA]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(nutrientsNIA, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (nutrientsP != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("nutrients[P]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(nutrientsP, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (nutrientsPROCNT != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("nutrients[PROCNT]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(nutrientsPROCNT, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (nutrientsRIBF != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("nutrients[RIBF]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(nutrientsRIBF, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (nutrientsSUGAR != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("nutrients[SUGAR]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(nutrientsSUGAR, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (nutrientsSUGAR_added != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("nutrients[SUGAR.added]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(nutrientsSUGAR_added, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (nutrientsSugar_alcohol != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("nutrients[Sugar.alcohol]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(nutrientsSugar_alcohol, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (nutrientsTHIA != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("nutrients[THIA]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(nutrientsTHIA, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (nutrientsTOCPHA != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("nutrients[TOCPHA]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(nutrientsTOCPHA, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (nutrientsVITA_RAE != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("nutrients[VITA_RAE]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(nutrientsVITA_RAE, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (nutrientsVITB12 != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("nutrients[VITB12]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(nutrientsVITB12, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (nutrientsVITB6A != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("nutrients[VITB6A]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(nutrientsVITB6A, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (nutrientsVITC != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("nutrients[VITC]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(nutrientsVITC, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (nutrientsVITD != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("nutrients[VITD]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(nutrientsVITD, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (nutrientsVITK1 != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("nutrients[VITK1]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(nutrientsVITK1, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (nutrientsWATER != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("nutrients[WATER]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(nutrientsWATER, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (nutrientsZN != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("nutrients[ZN]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(nutrientsZN, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (field != null)
            {
                foreach (var item_ in field) { urlBuilder_.Append(System.Uri.EscapeDataString("field") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (co2EmissionsClass != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("co2EmissionsClass") + "=").Append(System.Uri.EscapeDataString(ConvertToString(co2EmissionsClass, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tag != null)
            {
                foreach (var item_ in tag) { urlBuilder_.Append(System.Uri.EscapeDataString("tag") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.ObjectModel.ObservableCollection<Error>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new SwaggerException<System.Collections.ObjectModel.ObservableCollection<Error>>("A list of errors", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.ObjectModel.ObservableCollection<Error>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new SwaggerException<System.Collections.ObjectModel.ObservableCollection<Error>>("A list of errors", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// &lt;b&gt;Click here to view the documentation&lt;/b&gt;
        /// </summary>
        /// <param name="id">The recipe ID</param>
        /// <param name="type">Type of recipes to search for.</param>
        /// <param name="app_id">The application ID</param>
        /// <param name="app_key">The application key</param>
        /// <param name="beta">Allow beta features in response.</param>
        /// <param name="field">Recipe fields to be included in the response.</param>
        /// <returns>Recipe info</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Hit> V22Async(string id, Type2 type, string app_id, string app_key, bool? beta = null, System.Collections.Generic.IEnumerable<Anonymous8> field = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (type == null)
                throw new System.ArgumentNullException("type");

            if (app_id == null)
                throw new System.ArgumentNullException("app_id");

            if (app_key == null)
                throw new System.ArgumentNullException("app_key");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/recipes/v2/{id}?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("app_id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(app_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("app_key") + "=").Append(System.Uri.EscapeDataString(ConvertToString(app_key, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (beta != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("beta") + "=").Append(System.Uri.EscapeDataString(ConvertToString(beta, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (field != null)
            {
                foreach (var item_ in field) { urlBuilder_.Append(System.Uri.EscapeDataString("field") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Hit>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.ObjectModel.ObservableCollection<Error>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new SwaggerException<System.Collections.ObjectModel.ObservableCollection<Error>>("A list of errors", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.ObjectModel.ObservableCollection<Error>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new SwaggerException<System.Collections.ObjectModel.ObservableCollection<Error>>("A list of errors", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.ObjectModel.ObservableCollection<Error>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new SwaggerException<System.Collections.ObjectModel.ObservableCollection<Error>>("A list of errors", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new SwaggerException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new SwaggerException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response
    {

        [System.Text.Json.Serialization.JsonPropertyName("from")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public int? From { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("to")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public int? To { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("count")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public int? Count { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public Links _links { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("hits")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Collections.ObjectModel.ObservableCollection<Hit> Hits { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Errors : System.Collections.ObjectModel.ObservableCollection<Error>
    {

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Errors FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Errors>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Error
    {

        [System.Text.Json.Serialization.JsonPropertyName("errorCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string ErrorCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("message")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string Message { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("params")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Collections.ObjectModel.ObservableCollection<string> Params { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Error FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Error>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Links
    {

        [System.Text.Json.Serialization.JsonPropertyName("self")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public Link Self { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("next")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public Link Next { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Links FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Links>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Link
    {

        [System.Text.Json.Serialization.JsonPropertyName("href")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string Href { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("title")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string Title { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Link FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Link>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Hit
    {

        [System.Text.Json.Serialization.JsonPropertyName("recipe")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public Recipe Recipe { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public Links _links { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Hit FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Hit>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Recipe
    {

        [System.Text.Json.Serialization.JsonPropertyName("uri")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string Uri { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("label")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string Label { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("image")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string Image { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("images")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public Images Images { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("source")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string Source { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("url")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string Url { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("shareAs")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string ShareAs { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("yield")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public double? Yield { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dietLabels")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Collections.ObjectModel.ObservableCollection<string> DietLabels { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("healthLabels")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Collections.ObjectModel.ObservableCollection<string> HealthLabels { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("cautions")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Collections.ObjectModel.ObservableCollection<string> Cautions { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ingredientLines")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Collections.ObjectModel.ObservableCollection<string> IngredientLines { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ingredients")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Collections.ObjectModel.ObservableCollection<Ingredient> Ingredients { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("calories")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public double? Calories { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("glycemicIndex")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public double? GlycemicIndex { get; set; }

        /// <summary>
        /// BETA feature
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("totalCO2Emissions")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public double? TotalCO2Emissions { get; set; }

        /// <summary>
        /// BETA feature
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("co2EmissionsClass")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public RecipeCo2EmissionsClass? Co2EmissionsClass { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalWeight")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public double? TotalWeight { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("cuisineType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Collections.ObjectModel.ObservableCollection<string> CuisineType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mealType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Collections.ObjectModel.ObservableCollection<string> MealType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dishType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Collections.ObjectModel.ObservableCollection<string> DishType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("instructions")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Collections.ObjectModel.ObservableCollection<string> Instructions { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("tags")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Collections.ObjectModel.ObservableCollection<string> Tags { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("externalId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string ExternalId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalNutrients")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public NutrientsInfo TotalNutrients { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalDaily")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public NutrientsInfo TotalDaily { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("digest")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public Digest Digest { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Recipe FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Recipe>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ingredient
    {

        [System.Text.Json.Serialization.JsonPropertyName("text")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string Text { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public double? Quantity { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("measure")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string Measure { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("food")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string Food { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("weight")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public double? Weight { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("foodId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string FoodId { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Ingredient FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Ingredient>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NutrientsInfo
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static NutrientsInfo FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<NutrientsInfo>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NutrientInfo
    {

        [System.Text.Json.Serialization.JsonPropertyName("label")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string Label { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public double? Quantity { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("unit")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string Unit { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static NutrientInfo FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<NutrientInfo>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Digest : System.Collections.ObjectModel.ObservableCollection<DigestEntry>
    {

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Digest FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Digest>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DigestEntry
    {

        [System.Text.Json.Serialization.JsonPropertyName("label")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string Label { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("tag")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string Tag { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("schemaOrgTag")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string SchemaOrgTag { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("total")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public double? Total { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("hasRDI")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public bool? HasRDI { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("daily")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public double? Daily { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("unit")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string Unit { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("sub")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public Digest Sub { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static DigestEntry FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<DigestEntry>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ImageInfo
    {

        [System.Text.Json.Serialization.JsonPropertyName("url")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string Url { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("width")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public int? Width { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("height")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public int? Height { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ImageInfo FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ImageInfo>(data, options);

        }

    }

    /// <summary>
    /// Type of recipes to search for.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"public")]
        Public = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"user")]
        User = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"any")]
        Any = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous
    {

        [System.Runtime.Serialization.EnumMember(Value = @"balanced")]
        Balanced = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"high-fiber")]
        HighFiber = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"high-protein")]
        HighProtein = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"low-carb")]
        LowCarb = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"low-fat")]
        LowFat = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"low-sodium")]
        LowSodium = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"alcohol-cocktail")]
        AlcoholCocktail = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"alcohol-free")]
        AlcoholFree = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"celery-free")]
        CeleryFree = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"crustacean-free")]
        CrustaceanFree = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"dairy-free")]
        DairyFree = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"DASH")]
        DASH = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"egg-free")]
        EggFree = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"fish-free")]
        FishFree = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"fodmap-free")]
        FodmapFree = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"gluten-free")]
        GlutenFree = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"immuno-supportive")]
        ImmunoSupportive = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"keto-friendly")]
        KetoFriendly = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"kidney-friendly")]
        KidneyFriendly = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"kosher")]
        Kosher = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"low-fat-abs")]
        LowFatAbs = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"low-potassium")]
        LowPotassium = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"low-sugar")]
        LowSugar = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"lupine-free")]
        LupineFree = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"Mediterranean")]
        Mediterranean = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"mollusk-free")]
        MolluskFree = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"mustard-free")]
        MustardFree = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"no-oil-added")]
        NoOilAdded = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"paleo")]
        Paleo = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"peanut-free")]
        PeanutFree = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"pescatarian")]
        Pescatarian = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"pork-free")]
        PorkFree = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"red-meat-free")]
        RedMeatFree = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"sesame-free")]
        SesameFree = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"shellfish-free")]
        ShellfishFree = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"soy-free")]
        SoyFree = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"sugar-conscious")]
        SugarConscious = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"sulfite-free")]
        SulfiteFree = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"tree-nut-free")]
        TreeNutFree = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"vegan")]
        Vegan = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"vegetarian")]
        Vegetarian = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"wheat-free")]
        WheatFree = 35,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"American")]
        American = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Asian")]
        Asian = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"British")]
        British = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Caribbean")]
        Caribbean = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Central Europe")]
        Central_Europe = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Chinese")]
        Chinese = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Eastern Europe")]
        Eastern_Europe = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"French")]
        French = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Indian")]
        Indian = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"Italian")]
        Italian = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Japanese")]
        Japanese = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"Kosher")]
        Kosher = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"Mediterranean")]
        Mediterranean = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"Mexican")]
        Mexican = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"Middle Eastern")]
        Middle_Eastern = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"Nordic")]
        Nordic = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"South American")]
        South_American = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"South East Asian")]
        South_East_Asian = 17,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous4
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Breakfast")]
        Breakfast = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Dinner")]
        Dinner = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Lunch")]
        Lunch = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Snack")]
        Snack = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Teatime")]
        Teatime = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous5
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Biscuits and cookies")]
        Biscuits_and_cookies = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Bread")]
        Bread = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Cereals")]
        Cereals = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Condiments and sauces")]
        Condiments_and_sauces = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Desserts")]
        Desserts = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Drinks")]
        Drinks = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Main course")]
        Main_course = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Pancake")]
        Pancake = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Preps")]
        Preps = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"Preserve")]
        Preserve = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Salad")]
        Salad = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"Sandwiches")]
        Sandwiches = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"Side dish")]
        Side_dish = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"Soup")]
        Soup = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"Starter")]
        Starter = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"Sweets")]
        Sweets = 15,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous6
    {

        [System.Runtime.Serialization.EnumMember(Value = @"LARGE")]
        LARGE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"REGULAR")]
        REGULAR = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SMALL")]
        SMALL = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"THUMBNAIL")]
        THUMBNAIL = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous7
    {

        [System.Runtime.Serialization.EnumMember(Value = @"uri")]
        Uri = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"label")]
        Label = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"image")]
        Image = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"images")]
        Images = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"source")]
        Source = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"url")]
        Url = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"shareAs")]
        ShareAs = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"yield")]
        Yield = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"dietLabels")]
        DietLabels = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"healthLabels")]
        HealthLabels = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"cautions")]
        Cautions = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"ingredientLines")]
        IngredientLines = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"ingredients")]
        Ingredients = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"calories")]
        Calories = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"glycemicIndex")]
        GlycemicIndex = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"totalCO2Emissions")]
        TotalCO2Emissions = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"co2EmissionsClass")]
        Co2EmissionsClass = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"totalWeight")]
        TotalWeight = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"totalTime")]
        TotalTime = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"cuisineType")]
        CuisineType = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"mealType")]
        MealType = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"dishType")]
        DishType = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"totalNutrients")]
        TotalNutrients = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"totalDaily")]
        TotalDaily = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"digest")]
        Digest = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"tags")]
        Tags = 25,

    }

    /// <summary>
    /// (BETA) Filter recipes by their CO2 footprint.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Co2EmissionsClass
    {

        [System.Runtime.Serialization.EnumMember(Value = @"A+")]
        A_ = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"A")]
        A = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"B")]
        B = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"C")]
        C = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"D")]
        D = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"E")]
        E = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"F")]
        F = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"G")]
        G = 7,

    }

    /// <summary>
    /// Type of recipes to search for.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Type2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"public")]
        Public = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"user")]
        User = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous8
    {

        [System.Runtime.Serialization.EnumMember(Value = @"uri")]
        Uri = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"label")]
        Label = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"image")]
        Image = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"images")]
        Images = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"source")]
        Source = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"url")]
        Url = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"shareAs")]
        ShareAs = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"yield")]
        Yield = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"dietLabels")]
        DietLabels = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"healthLabels")]
        HealthLabels = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"cautions")]
        Cautions = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"ingredientLines")]
        IngredientLines = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"ingredients")]
        Ingredients = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"calories")]
        Calories = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"glycemicIndex")]
        GlycemicIndex = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"totalCO2Emissions")]
        TotalCO2Emissions = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"co2EmissionsClass")]
        Co2EmissionsClass = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"totalWeight")]
        TotalWeight = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"totalTime")]
        TotalTime = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"cuisineType")]
        CuisineType = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"mealType")]
        MealType = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"dishType")]
        DishType = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"totalNutrients")]
        TotalNutrients = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"totalDaily")]
        TotalDaily = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"digest")]
        Digest = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"tags")]
        Tags = 25,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Images
    {

        [System.Text.Json.Serialization.JsonPropertyName("THUMBNAIL")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public ImageInfo THUMBNAIL { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("SMALL")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public ImageInfo SMALL { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("REGULAR")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public ImageInfo REGULAR { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("LARGE")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public ImageInfo LARGE { get; set; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Images FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Images>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RecipeCo2EmissionsClass
    {

        [System.Runtime.Serialization.EnumMember(Value = @"A+")]
        A_ = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"A")]
        A = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"B")]
        B = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"C")]
        C = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"D")]
        D = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"E")]
        E = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"F")]
        F = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"G")]
        G = 7,

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SwaggerException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public SwaggerException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SwaggerException<TResult> : SwaggerException
    {
        public TResult Result { get; private set; }

        public SwaggerException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603